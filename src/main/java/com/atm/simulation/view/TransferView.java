package com.atm.simulation.view;

import com.atm.simulation.entity.Account;
import com.atm.simulation.service.AccountService;
import com.atm.simulation.service.TransactionService;
import com.atm.simulation.util.InputUtil;
import com.atm.simulation.util.ValidationUtil;

import java.util.Random;

public class TransferView {

    private WelcomeView welcomeView;
    private TransactionView transactionView;
    private TransactionService transactionService;
    private InputUtil inputUtil;
    private ValidationUtil validationUtil;

    public TransferView( InputUtil inputUtil, ValidationUtil validationUtil){
        this.inputUtil = inputUtil;
        this.validationUtil = validationUtil;
    }

    public void fundScreen(Account account) {
        //step 1
        System.out.println("Please enter destination account and \n" +
                "press enter to continue or");

        var input = inputUtil.inputString("press cancel (Esc) to go back to Transaction: ");
        String value = input;
        if(value.equalsIgnoreCase("esc")){
            transactionView.transactionScreen(account);
        }else{
            input = value;
        }

        //step 2 amount
        System.out.println("Please enter transfer amount and press enter to continue or ");
        var amount = inputUtil.inputString("press enter to go back to Transaction:");
        if (amount.isBlank() || amount.isEmpty()) {
            transactionView.transactionScreen(account);
        }

        //step 3 refNo
        System.out.println("Reference Number: (This is an autogenerated random 6 digits number)");
        var input3 = inputUtil.inputString("Press enter to continue or click 'x' Enter to go back to Transaction: ");

        if (input3.equalsIgnoreCase("x")) {
            transactionView.transactionScreen(account);
        } else if (!input3.isEmpty() || !input3.isBlank()) {
            System.out.println("Invalid Reference Number");
            fundScreen(account);
        }

        Random random = new Random();
        int randomNumber = random.nextInt(900000) + 100000;

        System.out.println("Transfer Confirmation\n" +
                "Destination Account : " + input.replace("\n","") + "\n" +
                "Transfer Amount     : $" + amount + "\n" +
                "Reference Number    : " + randomNumber + "\n" +
                "\n" +
                "1. Confirm Trx\n" +
                "2. Cancel Trx");

        var input4 = inputUtil.inputString("Choose option[2]:");

        if (input4.equals("1")) {
            //validate step 1
            try {
                transactionService.fundTransaction(account,input,amount,randomNumber);
            }catch (Exception e){
                System.out.println(e.getMessage());
                fundScreen(account);
            }
            fundSummaryScreen(Integer.parseInt(amount), randomNumber,Integer.parseInt(input), account);
        } else if (input4.equals("2")) {
            fundScreen( account);
        }

    }

    public void fundSummaryScreen(Integer trfAmount, Integer refNum, Integer accDest, Account account){
        System.out.println("Fund Transfer Summary\n" +
                "Destination Account : " + accDest + "\n" +
                "Transfer Amount     : $" + trfAmount + "\n" +
                "Reference Number    : " + refNum + "\n" +
                "Balance             : $" + account.getBalance() + "\n" +
                "\n" +
                "1. Transaction\n" +
                "2. Exit");
        var input = inputUtil.inputString("Choose option[2]");
        if (input.equals("1")) {
            transactionView.transactionScreen( account);
        } else if (input.equals("2")) {
            welcomeView.welcomeScreen();
        }
    }

    public void setParentView(TransactionView transactionView, WelcomeView welcomeView, TransactionService transactionService) {
        this.transactionView = transactionView;
        this.welcomeView = welcomeView;
        this.transactionService = transactionService;
    }
}
